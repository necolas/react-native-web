/**
 * WARNING: changes to this file in particular can cause significant changes to
 * the results of render performance benchmarks.
 */

import createReactDOMStyle from './createReactDOMStyle';
import flattenArray from '../../modules/flattenArray';
import flattenStyle from './flattenStyle';
import injector from './injector';
import mapKeyValue from '../../modules/mapKeyValue';
import prefixInlineStyles from './prefixInlineStyles';
import ReactNativePropRegistry from '../../modules/ReactNativePropRegistry';

import jss from 'jss';
import preset from 'jss-preset-default';

// I'm assuming this only needs to be setup once per app, not per file
let jssSetup = false;

if (!jssSetup) {
    jss.setup(preset());
    jssSetup = true;
}

const prefix = 'r';


/**
 * Converts a React Native style object to HTML class names
 */
let resolvedPropsCache = {};
let classNames = [];
const registerStyle = (id, flatStyle) => {
    const style = jss.createStyleSheet(flatStyle).attach();
    const className = mapKeyValue(style.classes, (prop, value) => {
        classNames.push(value);

        if (value != null) {
            return value;
        }
    }).join(' ').trim();

    const key = `${prefix}${id}`;
    resolvedPropsCache[key] = { className };

    return id;
};

const resolveClassName = (style) => {
    console.log('-- resolveClassName.style', style);
    if (typeof style === 'string') {
        return style; // className generated by `jss.createStyleSheet(styles).attach()`
    } else if (Array.isArray(style)) {
        return style.map((s, i) => {
            const rs = resolveClassName(s);
            return rs && i > 0 ? ` ${rs}` : rs;
        }).join('');
    } else if (typeof style === 'object') {
        const className = 'generated-class';
        const styles = {
            [className]: style // inline style object NOT from `StyleSheet.create()`
        };

        const jssObj = jss.createStyleSheet(styles).attach(); // append generated selector+style to the DOM

        return jssObj.classes[className];
    } else {
        return undefined;
    }
};

/**
 * Web style registry
 */
const StyleRegistry = {
    initialize() {
        classNames.forEach((className) => { injectedClassNames[className] = true; });
    },

    reset() {
        injectedClassNames = {};
        resolvedPropsCache = {};
        injector.reset();
    },

    register(style) {
        const id = ReactNativePropRegistry.register(style);
        return registerStyle(id, style);
    },

    resolve(props) {
        console.log('-- resolve.props', props);
        if (!props || !props.style) {
            return props.className || undefined;
        }

        const className = `${props.className || ''}${resolveClassName(props.style)}`.trim();

        return { className }; // note: we'll deal with display and pointer events `styleAsClassName` if we go this route
    }
};

module.exports = StyleRegistry;
